public class Maze{
  private Location start,end;
  private char[][] board;
    
    public Maze(String mazeText){
	try{
	    aMAZEingScouter(filename);
	}catch(FileNotFoundException e){
	    System.out.println(filename+".dat could not be found");
	    System.exit(1);
	}
    }

    public  void aMAZEingScouter(String filename) throws FileNotFoundException{
	ArrayList<char[]> mazeTemp = new ArrayList<>();
	File text = new File(filename);
	Scanner inf = new Scanner(text);
	while(inf.hasNextLine()){
	    String temp = inf.nextLine();
	    char[] line = new char[temp.length()];
	    for(int i = 0;i < line.length;i++){
		line[i] = temp.charAt(i);
	    }
	    mazeTemp.add(line);
	}
	maze = new char[mazeTemp.size()][mazeTemp.get(0).length];
        for(int r = 0;r < maze.length;r++){
	    for(int c = 0;c < maze[0].length;c++){
	        maze[r][c] = mazeTemp.get(r)[c];
		if(maze[r][c] == 'S'){
		    start = new Location(r,c);
		}
		if(maze[r][c] == 'E'){
		    end = new Location(r,c);
		}
	    }
	}
    }

  // '#' - wall 
  // ' ' - open space
  // '?' - frontier space
  // '.' - visited space
  // 'E' - end space (do not replace this)
  // '@' - part of solution
  // 'S' - starting space (do not replace this)
  public String toString(){
  }
   
  // Work on this method as a group! 
  public String toStringColor(){
  }

  //return a list of Locations that are:
  // adjacent to n and  not visited
  // all the Locations in this list should have their previous set to n.
  public Location[] getNeighbors(Location n){
    return null;
  }

  public Location getStart(){
    return start;
  }

  public Location getEnd(){
    return end;
  }



}
